# this is a pinpoint presentation, see https://wiki.gnome.org/Apps/Pinpoint for details

[white] [shading-opacity=0.0] [text-color=black] [font=Monospace 50px]
[transition=none]

-- [font=Sans 25px] [text-align=center]

<span font='Sans 100px'>μKanren</span>
<span font='Sans 50px'>A Minimal Functional Core for Relational Programming</span>

Jason Hemann, Daniel P. Friendman; (2013)

<span foreground='#aaaaaa'>Lucas Stadler, Eugen Rein, Jakob Matthes</span>

-- [font=Sans 50px]

• relational programming
• scheme
• 39 lines

-- [text-align=center]

call/fresh
===
disj
conj

-- [font=Sans 100px]

Scheme

--

(+ 1 2)
; 3

--

(+ 1 (* 3 4))
; 13

--

(append '(1 2 3) '(4 5 6))
; (1 2 3 4 5 6)

--

; maybe
(define (append l r)
  (cond
    ((null? l) r)
    (else (cons (car l)
                (append (cdr l) r)))))

-- [font=Sans 100px]

Beispiele

-- [text-color=#aaaaaa]

(<span foreground='black'>run*</span> (q)
  (=== q 5))
; (5)

-- [text-color=#aaaaaa]

(run* (q)
  (<span foreground='black'>===</span> q 5))
; (5)

--

(run* (q)
  (=== q 5))
; (5)

-- [text-color=#aaaaaa]

(run* (q)
  <span foreground='black'>(=== q q)</span>)
; (_.0)

-- [text-color=#aaaaaa]

(run* (q)
  (=== q q))
; <span foreground='black'>(_.0)</span>

-- [text-color=#aaaaaa]

(run* (q)
  (<span foreground='black'>disj</span>
    (=== q 5)
    (=== q 6)))
; (5 6)

-- [text-color=#aaaaaa]

(run* (q)
  <span foreground='black'>(disj
    (=== q 5)
    (=== q 6))</span>)
; (5 6)
-- [text-color=#aaaaaa]

(run* (q)
  (disj
    (=== q 5)
    (=== q 6)))
; <span foreground='black'>(5 6)</span>

-- [text-color=#aaaaaa]

(run* (q)
  (<span foreground='black'>conj</span>
    (=== q 5)
    (=== q 6)))
; ()

-- [text-color=#aaaaaa]

(run* (q)
  <span foreground='black'>(conj
    (=== q 5)
    (=== q 6))</span>)
; ()
-- [text-color=#aaaaaa]

(run* (q)
  (conj
    (=== q 5)
    (=== q 6)))
; <span foreground='black'>()</span>

-- [text-color=#aaaaaa]

(run* (q)
  (<span foreground='black'>fresh</span> (r)
    (conj
      (=== q r)
      (=== r 42))))
; 42

-- [text-color=#aaaaaa]

(run* (q)
  (fresh (y)
    (conj
      (=== q `(5 ,y))
      (disj
        (=== y 6)
        (=== y 7)))))
; ((5 6) (5 7))

-- [font=Sans 100px]

Concepts

-- [text-color=#aaaaaa]

# q is a variable

(run* (q)
  (=== <span foreground='black'>q</span> 5))

--

# run* is just a shortcut ...

(run* (q)
  (=== q 5))

-- [text-color=#aaaaaa]

(run* (q)
  <span foreground='black'>(=== q 5)</span>)
; (5)

-- [text-color=#aaaaaa]

(call/fresh
  (lambda (q)
    <span foreground='black'>(=== q 5)</span>))
; (5)

--

(<span foreground='#aaaaaa'>(call/fresh
   (lambda (q)
     (=== q 5)))</span>
 empty-state)

-- [text-color=#aaaaaa]

((call/fresh
   (lambda (q)
     (=== q 5)))
 empty-state)
; <span foreground='black'>((((#(0) . 5)) . 1))</span>

--

<span font='Sans'>q is a variable, displayed as </span>#(0)

           (var 0)
           ; #(0)

--

<span font='Sans'>• μKanren programs consist of <i>goals</i>
• goals are functions of one arguments</span>

        (=== (var 0) 5)
        ; &lt;goal&gt;

--

<span font='Sans'>• a goal produces a <i>stream</i></span>

((=== (var 0) 5) '(() . 1))
; (((#(0) . 5) . 1))

--

state:
(((#(0) . 5) (#(1) . #(0)) (#(2) . (1 2 3))) . 3)
;^ substitution                                ^ counter

--

substitution: mapping of variables to values (or other variables)
(use example above)

-- [font=Sans 100px]

Implementierung

--

(run* (x)
  (=== x 5))

--

(=== x 5)

--

(=== (var 0) 5)

--

((=== (var 0) 5) '(() . 1))

-- [text-color=#aaaaaa]

((<span foreground='black'>===</span> (var 0) 5) '(() . 1))

--

(define (=== x y)
  (lambda (s/c)
    (let ((s (unify u v (car s/c))))
      (if s
        (unit `(,s . ,(cdr s/c)))
        mzero))))

-- [text-color=#aaaaaa]

# goal constructor -> unify -> unit stream or empty stream

(define (=== x y)
  (lambda (<span foreground='black'>s/c</span>)
    (let ((s (unify u v (car s/c))))
      (if s
        (unit `(,s . ,(cdr s/c)))
        mzero))))

-- [text-color=#aaaaaa]

(define (=== x y)
  (lambda (s/c)
    (let ((s (<span foreground='black'>unify</span> u v (car s/c))))
      (if s
        (unit `(,s . ,(cdr s/c)))
        mzero))))

-- [text-color=#aaaaaa]

(<span foreground='black'>(=== (var 0) 5)</span> '(() . 1))
; <span foreground='black'>((#(0) . 5))</span>

--

(=== (x 2 3) (1 y 3))
; x = 1, y = 2

-- [text-color=#aaaaaa]

(<span foreground='black'>(=== `(,(var 0) 2        3)
      `(1        ,(var 1) 3))</span> '(() . 2))
; <span foreground='black'>((#(0) . 1) (#(1) . 2))</span>

-- [text-color=#aaaaaa]

(<span foreground='black'>(=== (var 0) 6)</span> `((,(var 0) . 5) . 1))
; <span foreground='black'>()</span>

-- [text-color=#aaaaaa]

(<span foreground='black'>(=== (var 0) 6)</span> `(<span foreground='black'>(,(var 0) . 5)</span> . 1))
; ()

--

(define (unify u v s)
  (let ((u (walk u s))
        (v (walk v s)))
    (cond
     ((and (var? u) (var? v) (var=? u v)) s)
     ((var? u) (ext-s u v s))
     ((var? v) (ext-s v u s))
     ((and (pair? u) (pair? v))
      (let ((s (unify (car u) (car v) s)))
        (and s (unify (cdr u) (cdr v) s))))
     (else (and (eqv? u v) s)))))

-- [text-color=#aaaaaa]

(define (unify u v s)
  (let ((u (<span foreground='black'>walk</span> u s))
        (v (<span foreground='black'>walk</span> v s)))
    (cond
     ((and (var? u) (var? v) (var=? u v)) s)
     ((var? u) (ext-s u v s))
     ((var? v) (ext-s v u s))
     ((and (pair? u) (pair? v))
      (let ((s (unify (car u) (car v) s)))
        (and s (unify (cdr u) (cdr v) s))))
     (else (and (eqv? u v) s)))))

--

walk

--

back to unify, similar to walk (with example)
(left-right or top-bottom split)

--

((unify `(,(var 0) 2 3) `(1 ,(var 1) 3)) '())

--

to relax: cat content. (looong, grumpy?, ...)

--

# how does it work? it unifies the two lists, as seen in the last example

((=== `(,(var 0) 2 3) `(1 ,(var 1) 3)) '(() . 2))
; ((((#(0) . 1) (#(1) . 2)) . 2))

--

(run* (q)
  (disj
    (=== q 5)
    (=== q 6)))

--

(define (disj g1 g2)
  (lambda (s/c)
    (mplus (g1 s/c) (g2 s/c))))

-- [text-color=#aaaaaa]

(define (disj g1 g2)
  (lambda (s/c)
    <span foreground='black'>(mplus (g1 s/c) (g2 s/c))</span>))

--

(define (mplus $1 $2)
  (cond
   ((null? $1) $2)
   (else (cons (car $1)
               (mplus (cdr $1) $2)))))

--

(mplus '() '(1 2 3))
; (1 2 3)

(mplus '(1 2) (3 4 5))
; (1 2 3 4 5)

--

(run* (q)
  (disj
    (=== q 5)
    (=== q 6)))

--- [text-color=#aaaaaa]

(run* (q)
  (disj
    <span foreground='black'>(=== q 5)</span>
    <span foreground='black'>(=== q 6)</span>))

#g1 g2 => (5) (6)
#mplus => ((5) (6))

--

(run* (q)
  (conj
    (=== q 5)
    (=== q 6)))

--

(define (conj g1 g2)
  (lambda (s/c)
    (bind (g1 s/c) g2)))

-- [text-color=#aaaaaa]

(define (conj g1 g2)
  (lambda (s/c)
    <span foreground='black'>(bind (g1 s/c) g2)</span>))

--

(define (bind $ g)
  (cond
   ((null? $) mzero)
   (else (mplus
           (g (car $))
           (bind (cdr $) g)))))

-- [text-color=#aaaaaa]

(define (bind $ g)
  (cond
   ((null? $) mzero)
   (else (mplus
           <span foreground='black'>(g (car $))</span>
           (bind (cdr $) g)))))

--

(bind ((((#(0) . 5)) . 1)) (=== (var 0) 6))

-- [text-color=#aaaaaa]

(bind <span foreground='black'>((((#(0) . 5)) . 1))</span> (=== (var 0) 6))
;     <span foreground='black'>$</span>                    g

-- [text-color=#aaaaaa]

(bind ((((#(0) . 5)) . 1)) <span foreground='black'>(=== (var 0) 6)</span>)
;     $                    <span foreground='black'>g</span>

-- [text-color=#aaaaaa]

;             <span foreground='black'>((((#(0) . 5)) . 1)) (=== (var 0) 6)</span>
(define (bind <span foreground='black'>$                    g</span>)
  (cond
   ((null? $) mzero)
   (else (mplus
           (g (car $))
           (bind (cdr $) g)))))

-- [text-color=#aaaaaa]

;             <span foreground='black'>((((#(0) . 5)) . 1)) (=== (var 0) 6)</span>
(define (bind <span foreground='black'>$                    g</span>)
  (cond
   <span foreground='black'>((null? $) mzero)</span>
   (else (mplus
           (g (car $))
           (bind (cdr $) g)))))

-- [text-color=#aaaaaa]

;             <span foreground='black'>((((#(0) . 5)) . 1)) (=== (var 0) 6)</span>
(define (bind <span foreground='black'>$                    g</span>)
  (cond
   ((null? $) mzero)
   (else <span foreground='black'>(mplus
           (g (car $))
           (bind (cdr $) g))</span>)))

-- [text-color=#aaaaaa]

;             <span foreground='black'>((((#(0) . 5)) . 1)) (=== (var 0) 6)</span>
(define (bind <span foreground='black'>$                    g</span>)
  (cond
   ((null? $) mzero)
   (else (mplus
           <span foreground='black'>(g (car $))</span>
           (bind (cdr $) g)))))

-- [text-color=#aaaaaa]

;             <span foreground='black'>((((#(0) . 5)) . 1)) (=== (var 0) 6)</span>
(define (bind <span foreground='black'>$                    g</span>)
  (cond
   ((null? $) mzero)
   (else (mplus
           <span foreground='black'>((=== (var 0) 6) (((#(0) . 1)) . 1))</span>
           (bind (cdr $) g)))))

--

(define (fives x)
  (disj
    (=== x 5)
    (fives x)))
; (while (not end-of-the-universe)
;   ...)

-- [text-color=#aaaaaa]

(define (fives x)
  (disj
    (=== x 5)
    <span foreground='black'>(fives x)</span>))

-- [text-color=#aaaaaa]

# η^{-1}-delay (fancy transition!)

(define (fives x)
  (disj
    (=== x 5)
    <span foreground='black'>(lambda (s/c)
      (lambda ()
        ((fives x) s/c)))</span>))

-- [text-color=#aaaaaa]

(define (mplus $1 $2)
  (cond
   ((null? $1) $2)
   (else (cons (car $1) (mplus (cdr $1) $2)))))

-- [text-color=#aaaaaa]

(define (mplus $1 $2)
  (cond
   ((null? $1) $2)
   <span foreground='black'>((procedure? $1) (lambda () (mplus ($1) $2)))</span>
   (else (cons (car $1) (mplus (cdr $1) $2)))))

-- [text-color=#aaaaaa]

(define (bind $ g)
  (cond
   ((null? $) mzero)
   (else (mplus (g (car $)) (bind (cdr $) g)))))

-- [text-color=#aaaaaa]

(define (bind $ g)
  (cond
   ((null? $) mzero)
   <span foreground='black'>((procedure? $) (lambda () (bind ($) g)))</span>
   (else (mplus (g (car $)) (bind (cdr $) g)))))

--

(run* (x)
  (disj
    (fives x)
    (sixes x)))
; only fives

-- [text-color=#aaaaaa]

(define (mplus $1 $2)
  (cond
   ((null? $1) $2)
   ((procedure? $1) (lambda () <span foreground='black'>(mplus ($1) $2)</span>))
   (else (cons (car $1) (mplus (cdr $1) $2)))))

-- [text-color=#aaaaaa]

# interleaving! (also requires a fancy transition!) (!!!)

(define (mplus $1 $2)
  (cond
   ((null? $1) $2)
   ((procedure? $1) (lambda () <span foreground='black'>(mplus $2 ($1))</span>))
   (else (cons (car $1) (mplus (cdr $1) $2)))))

--

(run* (x)
  (disj
    (fives x)
    (sixes x)))
; fives and sixes!

--

; trace fives and sixes
(5 is 6 is)

-- [font=Sans 100px]

Grenzen

<span font='50px'>• Negation (<span font='Monospace'>=/=</span> in cKanren)
• Zahlen (miniKanren, cKanren)
• "Interface" (<span font='Monospace'>run*</span> und andere mit Macros)
• Performance (u.a. Tabling in miniKanren)</span>

-- [font=Sans 100px]

Zusammenfassung

<span font='50px'>• Eleganz
• Erweiterbarkeit (cKanren, αKanren, rKanren)
• Einbettung in anderen Sprachen (> 20)
• relationale Programmierung</span>

--

(define + -)

                

--

(define + -)
; have fun!
                

--

(define + -)
; have fun!
; any questions?

--